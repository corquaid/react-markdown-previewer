{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","initialMarkdown","markdownText","setMarkdownText","renderer","marked","Renderer","setOptions","breaks","className","class","for","id","value","onChange","e","target","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIe,SAASA,IAAO,IAAD,EAEYC,mBAASC,GAFrB,mBAErBC,EAFqB,KAEPC,EAFO,KAQtBC,EAAW,IAAIC,IAAOC,SAQ5B,OAJAD,IAAOE,WAAW,CAChBC,QAAQ,IAIR,sBAAKC,UAAU,MAAf,UACE,yDACA,6CAAe,mBAAGC,MAAM,wBAAT,SACb,sDAEF,sBAAKD,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOE,IAAI,SAAX,oBACA,0BACEC,GAAG,SACHC,MAAOX,EACPY,SAxBW,SAACC,GACpBZ,EAAgBY,EAAEC,OAAOH,aA0BrB,sBAAKJ,UAAU,eAAf,UACE,uBAAOE,IAAI,UAAX,4BACA,qBACEC,GAAG,UACHC,MAAOX,EACPe,wBAAyB,CAACC,OAAQb,IAAOH,EAAcE,eAYnE,IAAMH,EAAe,k1CCxCNkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7252b21f.chunk.js","sourcesContent":["import './App.css';\nimport marked from 'marked';\nimport React, { useState } from 'react';\n\nexport default function App() {\n\n  const [markdownText, setMarkdownText] = useState(initialMarkdown);\n\n  const handleChange = (e) => {\n    setMarkdownText(e.target.value);\n  }\n\n  const renderer = new marked.Renderer(); \n\n  // Set marked.js break option to true to parse carriage returns (Enter key pressed) as line breaks in preview window\n\n  marked.setOptions({\n    breaks: true\n  })\n  \n  return (\n    <div className=\"App\">\n      <h1>Live Markdown Previewer</h1>\n      <p>Created for <i class=\"fab fa-free-code-camp\">\n        <span> freeCodeCamp</span></i>\n      </p>\n      <div className=\"container\">\n        <div className=\"editor-cont\">\n          <label for=\"editor\">Editor</label>\n          <textarea\n            id=\"editor\"\n            value={markdownText}\n            onChange={handleChange}\n            />\n        </div>\n        <div className=\"preview-cont\">\n          <label for=\"preview\">Preview Window</label>\n          <div\n            id=\"preview\"\n            value={markdownText}\n            dangerouslySetInnerHTML={{__html: marked(markdownText, renderer)}}\n            >\n          </div>\n        </div>  \n      </div>\n    \n    </div>\n    \n  );\n}\n\n\nconst initialMarkdown = `\n# Markdown Previewer\nHi there! I'm [Cormac](https://github.com/corquaid) and this is my Markdown Previewer app created as part of the [freeCodeCamp](https://www.freecodecamp.org/) Front-End Libraries Certification.\n\nThis app uses [React](https://reactjs.org/) and the [Marked](https://reactjs.org/) markdown parser and compiler to convert [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) text into html.\n\nHere are some examples of HTML elements in markdown format.\n\n### Various Header Levels\n\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n### List\n\n- list item one\n- list item two\n- list item three\n\n### Links\n\n[Stack Overflow](https://stackoverflow.com \"Coder's Bible\")\n\n[Google](https://www.google.com \"World's Most Popular Search Engine\")\n\n### Text Decorations\n\n*italic*\n\n**bold**\n\n***bold and italic***\n\n### Images\n\n![alt text](https://cdn.arstechnica.net/wp-content/uploads/2018/02/FalconHeavy1.jpg 'Big Ass Rocket')\n\n### Blockquote\n\n> Check out my cool little [Random Quote Machine!](https://corquaid.github.io/random_quote_machine_Bootstrap/)\n\n### Code Example\n\n\\`npm install create-react-app -g\\`\n\n\\`\\`\\`\nfunction addTwoNumbers(a, b) {\n  return a + b\n}\nconst name = 'Benjamin'\nconst age = 37\nconst number = Math.random() * 10\n\\`\\`\\`\n`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}